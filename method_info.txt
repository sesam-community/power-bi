Methods:
	main.py:

		get_env: 
			Purpose:
				Takes the name of an os environment variable and returns its value
			Parameters: 
				var: Variable name

			Returns:
				The variable value
		check_dataset_status:
			Purpose:
				Checks if the dataset already excist in Power BI  
			Parameters: 
				current_datasets: The response from a PowerBI get request
				pipe_name       : The Sesam pipe name sent from the Sesam sink url variable
			Returns:
				Boolean, dataset_id
				If the first object is true then the program creates a new dataset in Power BI
				The second object has the dataset id from Power BI if first object is False 

		main_func:
			Purpose:
				Receives the Sesam post and posts the data into Power BI.
			Parameters:
				node_id  : The Sesam node id sent from the Sesam sink url variable
				pipe_name: The Sesam pipe name sent from the Sesam sink url variable
			Returns: 
				The new Power BI get request response
		
		post_powerbi_rows:
			Purpose:
				Post new rows (entities) into Power BI
			Parameters:
				dataset_id: The Power BI dataset id
				pipe_name : The Sesam pipe name sent from the Sesam sink url variable
				data      : The rows (entities) to be posted
			Returns:
				None

		create_powerbi_dataset:
			Purpose:
				Creates a new dataset with columns (properties) into Power BI
			Parameters:
				data      : The dataset setup with tables and columns (properties) to be posted
			Returns:
				None

		delete_powerbi_rows:
			Purpose:
				Delete all the rows (entities) in Power BI
			Parameters:
				dataset_id: The Power BI dataset id
				table_name: The Power BI table name for the specified dataset id
			Returns:
				None

		get_powerbi:
			Purpose:
				Gets the response for a specific dataset in a specific workspace in Power BI
			Parameters:
				workspace_id: The id of the specific workspace in Power BI
				dataset_id  : The Power BI dataset id
			Returns:
				The request get response

	powerBI.py:
		setup_dataset:
			Purpose:
				Initializes the dataset to be posted into Power BI
			Parameters:
				pipe_name: The Sesam pipe name sent from the Sesam sink url variable
			Returns:
				The new dataset to be filled with rows (entities)

		find_dataset_id:
			Purpose:
				Finds the Power BI dataset_id of a dataset (several datasets can have the same name but different ids)
			Parameters:
				pipe_name: The Sesam pipe name sent from the Sesam sink url variable
			Returns:
				The new dataset to be filled with rows (entities)


		add_columns:
			Purpose:
				Populating the new dataset with columns
			Parameters:
				new_dict: The new dataset template
				schema  : The schema from Sesam containing info of dataTypes
			Returns:
				The dataset template populated with rows.

		add_rows:
			Purpose:
				Populating the new dataset with rows (entities)
			Parameters:
				entities          : The Sesam entities as a list
				populated_dataset : The dataset template
				keys			  : The properties from the Sesam entities
			Returns:
				The dataset template populated with rows (entities)

		format_value:
			Purpose:
				Formats the values from the entitiy key-value pair to a format readable by Power BI
			Parameters:
				value   : The Sesam entity value from a property
				dataType: The data type of the property, specified by the Schema
			Returns:
				A formatted value
	create_jwt.py:
		get_token:
			Purpose:
				Creates an access token to access the Power BI restAPI
			Parameters:
				client_id    : The Power BI client id
				tenant_id    : Your tenant token 
				refresh_token: The refresh token generated by get_refresh_token.py 
			Returns:
				The access token

	get_refresh_token.py :
		get_refresh_token:
			Purpose:
				Creates a refresh token
			Parameters:
				auth_endpoint: Set to a default 
				tenant_id    : See above
				client_id    : See above
				resource     : 'https://analysis.windows.net/powerbi/api'
			Returns:
				Prints the refresh token

